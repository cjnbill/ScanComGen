
package cop5556sp17;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

import static org.junit.Assert.assertEquals;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;


	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg integer i";
		String input = progname + "  {\n" +
                "boolean a\n"+
                "boolean b\n"+
                "a<- true;\n"+
                "if(a){\n" +
                "i<-1;\n"+
                "integer m\n"+
                "m<-1;\n"+
                "}\n"+
                "while(i<3){\n" +
                "i<-i+1;\n"+
                "m<-2;\n"+
                "}\n"+

                "}\n"
                ;
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[1];
		args[0]="1";
		//create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	@Test
	public void complexProg() throws Exception {
//scan, parse, and type check the program
		/*String progname = "complexProg";
		String input = progname + " integer a, boolean b, integer c ,file f{\n" +
				"   image i\n"+
				"   image out\n"+
				"	d <- a;\n" +
				"	integer d\n" +
                "   sleep 1000;\n"+
				"   f->out; "+
				"   out <- out - out;\n"+
		        "	while (d > 0) {\n" +
				"		integer a\n" +
				"		a <- c;\n" +
				"		d <- d - a;\n" +
				"		if (d * 2 / 4 <= 0 + 5) {\n" +
				"			boolean a\n" +
				"			a <- true;\n" +
				"			if (b == a) {" +
				"				b <- a;\n" +
				"			}\n" +
				"		}\n" +
				"	}\n" +
				"}";
			*/
		String input=
				"compProg2 integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \nx <- 100; \ny <- x / 3 * 2; \nz <- y; \nbool_1 <- false; \nbool_2 <- true; \ninteger y \ny <- z + 20; \nz <- y; \nif(bool_2){ \nboolean bool_1 \nbool_1 <- bool_2; \n} \nif(bool_1) { \ninteger err \nerr <- 2333; \n} \ninteger pass_token \npass_token <- 0; \nwhile(pass_token != 4) { \ninteger local_1 \ninteger local_2 \nlocal_1 <- 45; \nlocal_2 <- 46; \nif(local_1 != local_2) {pass_token <- pass_token + 1;} \nif(local_1 == local_2) {pass_token <- pass_token + 1;} \nif(local_1 > local_2) {pass_token <- pass_token + 1;} \nif(local_1 >= 45) {pass_token <- pass_token + 1;} \nif(local_1 < local_2) {pass_token <- pass_token + 1;} \nif(46 <= local_2) {pass_token <- pass_token + 1;} \nif((local_1 > local_2)) {pass_token <- pass_token + 1;} \n} \n} ";
        Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

// directly execute bytecode
		String[] args = new String[5];
		args[0]="1";
		args[1]="2";
		args[2]="3";
		args[3]="true";
		args[4]="false";
		//args[0] = "http://pic.sc.chinaz.com/files/pic/pic9/201508/apic14340.jpg";
		//args[1] = "/Users/cjn/Dropbox/lc/1.jpg";
		//args[3]="https://ufedge.video.ufl.edu/Mediasite/Catalog/catalogs/cop5556s2017";
		//ByteArrayOutputStream baos = new ByteArrayOutputStream();
		//System.setOut(new PrintStream(baos));
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		//String outputString = baos.toString();
		String expectedString = "20515510truetrue55truetrue50truetrue";
		//assertEquals(expectedString, outputString);
	}


	@Before
	public void initLog(){
		if (devel || grade) PLPRuntimeLog.initLog();
	}
	@After
	public void printLog(){
		System.out.println(PLPRuntimeLog.getString());
	}


}
